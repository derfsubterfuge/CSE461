package edu.uw.cs.cse461.sp12.OSAndroid.Ping;

import java.io.File;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;
import java.util.Properties;

import org.json.JSONObject;

import android.app.Activity;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.text.format.Formatter;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import edu.uw.cs.cse461.sp12.OS.ContextManager;
import edu.uw.cs.cse461.sp12.OS.IPFinder;
import edu.uw.cs.cse461.sp12.OS.OS;
import edu.uw.cs.cse461.sp12.OS.RPCCallerSocket;
import edu.uw.cs.cse461.sp12.OS.RPCService;
import edu.uw.cs.cse461.sp12.OSAndroidApps.R;


public class PingActivity extends Activity {
	private static final String TAG="PingActivity";
	private String mMyIP;
	private String mServerIP;
	private int mServerPort;
	
	private long mStartTime;
	private long mStopTime;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Log.e(TAG, "onCreate");
        
        setContentView(R.layout.main);
        
        // save my context so that this app can retrieve it later (?)
        ContextManager.setContext(getApplicationContext());
        
    }
    
    /**
     * Called after we've been unloaded from memory and are restarting.  E.g.,
     * 1st launch after power-up; relaunch after going Home.
     */
    @Override
    protected void onStart() {
    	super.onStart();
        Log.e(TAG, "onStart");
        
        new Thread(){
        	public void run() {
                initialize();
                try {
                	String[] files = getAssets().list("");
                	for ( int i=0; i<files.length; i++ ) {
                		Log.e(TAG, "asset: " + files[i]);
                	}
                    
                	mMyIP = IPFinder.getMyIP();
                	
                	runOnUiThread(new Runnable() {
                		public void run() {
                        	String msg = mMyIP + ":" + Integer.toString(((RPCService)OS.getService("rpc")).localPort());
                	    	TextView myIpText = (TextView)findViewById(R.id.myiptext);
                        	if ( myIpText != null ) myIpText.setText(msg);
                		}
                	});
                	
                	Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
                	NetworkInterface iface;
                	String addressString;
                	while ( interfaces.hasMoreElements() ) {
                		iface = interfaces.nextElement();
                		if ( iface.isLoopback() ) continue;
                		Log.e(TAG, iface.toString());
                		Log.e(TAG, "getDisplayName = " + iface.getDisplayName());
                		Enumeration<InetAddress>ipVec =  iface.getInetAddresses();
                    	Log.e(TAG, "ipVec = ");
                    	if ( ipVec.hasMoreElements() ) {
                    		InetAddress address = ipVec.nextElement();
                    		addressString = address.toString();
                    		Log.e(TAG, "\t" + addressString);
                    		//break;
                    	}
                		Log.e(TAG, "getName = " + iface.getName());
                		Log.e(TAG, "isLoopback = " + (iface.isLoopback()?"yes":"no"));
                		Log.e(TAG, "isUp = " + (iface.isUp()?"yes":"no"));
                	}

                } catch (Exception e) {
                	Log.e(TAG, "Caught exception trying to display ip/port");
                }
        	}
        }.start();
    }

    /**
     * Wake-up from pause -- e.g., hitting the power button to bring up the display
     */
    @Override
    protected void onResume() {
    	super.onResume();
        Log.e(TAG, "onResume");
    }
    
    /**
     * Called when anything comes to the foreground on top of this app,
     * including hitting the power button.
     */
    @Override
    protected void onPause() {
    	super.onPause();
        Log.e(TAG, "onPause");
    }
    
    /**
     * Called, for example, if the user hits the Home button.
     */
    @Override
    protected void onStop() {
    	super.onStop();
    	Log.e(TAG, "onStop");
    	// This will cause us to lose any currently allocated port...
    	OS.shutdown();
    }
    
    /**
     * System is shutting down...
     */
    @Override
    protected void onDestroy() {
    	super.onDestroy();
    	Log.e(TAG,"onDestroy");
    }
    
    private void initialize() {
		String configFilename = "jz.cse461.config.ini";  // default: may not exist
		
		try {
			// read config file data
			Properties config = new Properties();
			config.load(getAssets().open(configFilename));
			
			OS.boot(config);
			OS.startServices(OS.rpcServiceClasses);
			// not used until Project 4
			OS.startServices(OS.ddnsServiceClasses);

		} catch (Exception e) {
			Log.e(TAG, "Caught exception: " + e.getMessage());
		}
    }
    
    private boolean readUserInputs() {
        try {
            mServerIP = ((TextView)findViewById(R.id.iptext)).getText().toString();
            String portStr = ((TextView)findViewById(R.id.porttext)).getText().toString();
        	mServerPort = Integer.parseInt(portStr);
        } catch (Exception e) {
        	return false;
        }
    	return true;
    }
    
    public void onGoClicked(View b) {
    	if ( readUserInputs() ) {
    		
    	}
    	new Thread(){
    		public void run() {
    	    	try {
    	    		mStartTime = System.nanoTime();
    	    		RPCCallerSocket sock = new RPCCallerSocket(OS.hostname(), "cse461.cs.washington.edu", "46120");
    	    		JSONObject result = sock.invoke("echo", "echo", new JSONObject().put("testarg", 12.3));
    	    		mStopTime = System.nanoTime();
    	    		Log.e(TAG,  "Result = " + result.toString());
    	    		runOnUiThread(new Runnable() {
    	    			void run() {
    	    				updatePingResult();
    	    			}
    	    		});
    	    	} catch (Exception e) {
    	    		Log.e(TAG, "Caught exception: " + e.getMessage());
    	    	}
    		}
    	}.start();
    }
    
    private void updatePingResult(long startTime, long stopTime ) {
		Log.e(TAG, "Ping time = " + ((stopTime-startTime)/1000000.0) + " msec.");
    	TextView outputText = (TextView)findViewById(R.id.outputtext);
		String msg = this.mServerIP + ":" + mServerPort + "\n\t" + ((stopTime-startTime)/1000000.0) + " msec.";
		outputText.setText(msg);
    }
}