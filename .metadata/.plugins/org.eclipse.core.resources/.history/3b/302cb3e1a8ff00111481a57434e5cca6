package edu.uw.cs.cse461.ConsoleApps;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;

import edu.uw.cs.cse461.Net.Base.NetBase;
import edu.uw.cs.cse461.Net.Base.NetLoadable.NetLoadableConsoleApp;
import edu.uw.cs.cse461.util.ConfigManager;

/**
 * Raw sockets version of echo client.
 * @author zahorjan
 *
 */
public class EchoRaw extends NetLoadableConsoleApp {
	private static final String TAG="EchoRaw";
	
	// ConsoleApp's must have a constructor taking no arguments
	public EchoRaw() {
		super("echoraw", true);
	}
	
	@Override
	public void run() {
		try {
			
			// Eclipse doesn't support System.console()
			BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
			ConfigManager config = NetBase.theNetBase().config();

			String targetIP = config.getProperty("echoraw.server");
			if ( targetIP == null ) {
				System.out.println("No echoraw.server entry in config file.");
				System.out.print("Enter a host ip, or empty line to exit: ");
				targetIP = console.readLine();
				if ( targetIP == null || targetIP.trim().isEmpty() ) return;
			}

			int targetUDPPort = config.getAsInt("echoraw.udpport", 0, TAG);
			if ( targetUDPPort == 0 ) {
				System.out.print("Enter the server's UDP port, or empty line to skip: ");
				String targetUDPPortStr = console.readLine();
				if ( targetUDPPortStr == null || targetUDPPortStr.trim().isEmpty() ) targetUDPPort = 0;
				else targetUDPPort = Integer.parseInt(targetUDPPortStr);
			}

			int targetTCPPort = config.getAsInt("echoraw.tcpport", 0, TAG);
			if ( targetTCPPort == 0 ) {
				System.out.print("Enter the server's TCP port, or empty line to skip: ");
				String targetTCPPortStr = console.readLine();
				if ( targetTCPPortStr == null || targetTCPPortStr.trim().isEmpty() ) targetTCPPort = 0;
				else targetTCPPort = Integer.parseInt(targetTCPPortStr);
			}

			while ( true ) {
				try {

					System.out.print("Enter message to be echoed, or empty string to exit: ");
					String msg = console.readLine();
					if ( msg.isEmpty() ) return;

					if ( targetUDPPort != 0 ) {
						DatagramSocket socket = new DatagramSocket();
						socket.setSoTimeout(500); // wait at most 500 msec.
						byte[] buf = msg.getBytes();
						DatagramPacket packet = new DatagramPacket(buf, buf.length, new InetSocketAddress(targetIP, targetUDPPort));
						socket.send(packet);

						byte[] receiveBuf = new byte[buf.length];
						DatagramPacket receivePacket = new DatagramPacket(receiveBuf, receiveBuf.length);
						try { 
							socket.receive(receivePacket);
							String response = new String(receiveBuf, 0, receivePacket.getLength());
							System.out.println(response);
						} catch (SocketTimeoutException e) {
							System.out.println("UDP socket timeout");
						}
						socket.close();
					}
					
					if ( targetTCPPort != 0 ) {
						Socket tcpSocket = new Socket(targetIP, targetTCPPort);
						tcpSocket.setSoTimeout(500);
						InputStream is = tcpSocket.getInputStream();
						OutputStream os = tcpSocket.getOutputStream();
						byte[] msgBytes = msg.getBytes();
						byte[] buf = new byte[msgBytes.length];
						os.write(msgBytes, 0, msgBytes.length);
						try {
							int len = 0;
							while ( len < msgBytes.length) {
								len += is.read(buf, len, buf.length);
							}
							String response = new String(buf, 0, msgBytes.length);
							System.out.println(response);
						} catch (Exception e) {
							System.out.println("TCP read failed: " + e.getMessage());
						}
						tcpSocket.close();
					}
					
				} catch (Exception e) {
					System.out.println("Exception: " + e.getMessage());
				} 
			}
		} catch (Exception e) {
			System.out.println("Echo.run() caught exception: " +e.getMessage());
		}
	}
	
	@Override
	public void shutdown() {
	}
	
}
