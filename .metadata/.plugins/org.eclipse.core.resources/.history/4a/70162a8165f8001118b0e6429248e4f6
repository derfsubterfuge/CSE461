package edu.uw.cs.cse461.NetBase;

import java.util.Vector;

import edu.uw.cs.cse461.NetBase.DDNS.DDNSException.DDNSRuntimeException;

/**
 * The public interface for the OSProperties class, which provides a minimal wrapper extending
 * <code>java.util.Properties<code> (so public methods of that class may be used as well).
 * The primary function is to mask catch the error thrown when by <code>java.util.Properties</code>
 * when you ask for the value of a key that doesn't exist, replacing it by logging a warning and
 * returning a caller-supplied default value in that case.
 * <p>
 * <b>Note:</b> Like other interfaces in this project, this interface definition is provided
 * for documentation reasons - it's a succinct listing of the public methods.  It is not intended that
 * there ever be more than one implementation of the interface.
 * 
 * @author zahorjan
 *
 */
public interface NetPropertiesInterface {
	/**
	 * Return the integer value associated with the key argument.  Throws an exception if 
	 * the key doesn't exist in the config file.
	 */
	public int getInt(String key) throws NoSuchFieldException;
	/**
	 * Returns the integer value associated with the key argument.  Returns defaultVal if
	 * the key doesn't exist in the config file.   
	 */
	public int getInt(String key, int defaultVal, String TAG);
	/**
	 * Returns the integer value associated with the key argument.  Returns defaultVal if
	 * the key doesn't exist in the config file.   Adds a warning message to the log if 
	 * the returned value is less than minimum.
	 */
	public int getInt(String key, int defaultVal, int minimum, String TAG);
	/**
	 * Returns the integer value associated with the key argument.  Returns defaultVal if
	 * the key doesn't exist in the config file.   Adds a warning message to the log if 
	 * the returned value is less than minimum or greater than maximum.
	 */
	public int getInt(String key, int defaultVal, int minimum, int maximum, String TAG);

}
