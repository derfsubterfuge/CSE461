package edu.uw.cs.cse461.sp12.OS;


/**
 * Utility class representing a single entry in the ddns cache.
 * <p>
 * Fields:
 * <ul>
 * <li>tag - A string annotation (usually "host:type", but can be arbitrary)
 * <li>type - Primarily used to indicate "no record found," or else whether it was a host lookup or an app lookup
 * <li>ip - The resolved ip, or null if none found.  (Note: The "ip" can be an Internet DNS name.  Java allows both where it allows either.)
 * <li>port - The value field of the record.  When an app lookup is performed, it's the port.  When a host lookup is done, it's null.
 * <li>authoritative - If true, indicates that entry will never be expired from the cache
 * </ul>
 * @author zahorjan
 *
 */
public class RRecord {		
	protected RRType mType;  
	protected boolean mAuthoritative;
	protected long mTTL;

	public enum RRType {
		RRTYPE_EMPTY {
			@Override
			public String toString() { return "EMPTY"; }
		},
		RRTYPE_A {
			@Override
			public String toString() { return "A"; }
		},
		RRTYPE_NS {
			@Override
			public String toString() { return "NS"; }
		},
		RRTYPE_SOA {
			@Override
			public String toString() { return "SOA"; }
		},
		RRTYPE_CNAME {
			@Override
			public String toString() { return "CNAME"; }
		},
		NEGATIVE {
			@Override
			public String toString() { return "NEGATIVE"; }
		},
	};
	
	protected RRecord() {
		mType = RRType.RRTYPE_EMPTY;
		mAuthoritative = false;
		mTTL = 0;
	}
	
	public String toString(String prefix) {
		StringBuilder sb = new StringBuilder();
		sb.append(_toString(sb, prefix).toString());
		return sb.toString();
	}
	
	StringBuilder _toString(StringBuilder sb, String prefix) {
		sb.append(prefix).append("Type:\t").append(mType.toString()).append("\n");
		sb.append(prefix).append("Auth:\t").append(mAuthoritative?"1":"0").append("\n");
		sb.append(prefix).append("TTL:\t").append(mTTL);
		return sb;
	}
	
	public RRType type() { return mType; }
	public Boolean authoritative() { return mAuthoritative; }
	public long ttl() { return mTTL; }
	
	//-------------------------------------------------------------------
	// A record
	//-------------------------------------------------------------------
	
	public static class ARecord extends RRecord {
		protected String mIP;
		protected int mPort;

		public ARecord(String ip, int port) {
			mType = RRType.RRTYPE_A;
			mIP = ip;
			mPort = port;
		}
		
		@Override
		protected StringBuilder _toString(StringBuilder sb, String prefix) {
			super._toString(sb,  prefix);
			sb.append(prefix).append("IP:\t").append(mIP).append("\n");
			sb.append(prefix).append("Port:\t").append(mPort).append("\n");
			sb.append(prefix).append("Neg:\t").append(isNegative()?"true":"false");
			return sb;
		}
		
		public String ip() { return mIP; }
		public int port() { return mPort; }
		public boolean isNegative() { return mIP == null; }
	}
	
	//-------------------------------------------------------------------
	// NS record
	//-------------------------------------------------------------------
	
	public static class NSRecord extends ARecord {
		protected String mServerName; 
		protected String mServerPassword;
		public NSRecord(String name, String password) {
			super(null,-1);
			mType = RRType.RRTYPE_NS;
			mServerName = name;
			mServerPassword = password;
		}
		
		public String password() { return mServerPassword; }
		
		@Override
		StringBuilder _toString(StringBuilder sb, String prefix) {
			super._toString(sb,prefix).append("\n");
			sb.append(prefix).append("Server:\t").append(mServerName).append("\n");
			// we don't print the password
			sb.append(prefix).append("Password:\t").append("********");
			return sb;
		}
	}

	//-------------------------------------------------------------------
	// CNAME record
	//-------------------------------------------------------------------
	
	public static class CNAMERecord extends RRecord {
		protected String mAlias;
		public CNAMERecord(String alias) {
			mType = RRType.RRTYPE_CNAME;
			mAlias= alias;
		}
		
		@Override
		public StringBuilder _toString(StringBuilder sb, String prefix) {
			super._toString(sb,prefix).append("\n");
			sb.append(prefix).append("Alias:\t").append(mAlias);
			return sb;
		}
	}

	//-------------------------------------------------------------------
	// SOA record
	//-------------------------------------------------------------------
	
	public static class SOARecord extends RRecord {
		protected String mParentPassword;
		public SOARecord(String password) {
			mType = RRType.RRTYPE_SOA;
			mParentPassword= password;
		}
		
		@Override
		public StringBuilder _toString(StringBuilder sb, String prefix) {
			super._toString(sb,prefix).append("\n");
			sb.append(prefix).append("Parentpassword:\t").append("********");
			return sb;
		}
		
		String password() { return mParentPassword; }
	}
	
}
