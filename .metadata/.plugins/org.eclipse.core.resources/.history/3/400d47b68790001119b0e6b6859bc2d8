package edu.uw.cs.cse461.sp12.OS;

import java.util.HashMap;

import edu.uw.cs.cse461.sp12.OS.DDNSException.DDNSAuthorizationException;
import edu.uw.cs.cse461.sp12.OS.DDNSRRecord.RRType;

class DDNSNode {
	private DDNSFullName mName;
	private String mPassword;
	private DDNSRRecord mRecord;
	private HashMap<DDNSFullName, DDNSNode> mChildren;

	public DDNSNode(DDNSFullName name, String password, DDNSRRecord record) {
		mName = name;
		mPassword = password;
		mRecord = record;
		mChildren = new HashMap<DDNSFullName,DDNSNode>();
	}

	DDNSFullName name() { return mName; }
	DDNSNode findChild(String name) { return mChildren.get(name); }
	
	private void _checkAuth(String password) throws DDNSAuthorizationException {
		if ( mPassword == null || !mPassword.equals(password) ) throw new DDNSAuthorizationException("Bad password");		
	}

	DDNSRRecord record() { return mRecord; }
	DDNSRRecord setRecord(DDNSRRecord r, String password) throws DDNSAuthorizationException {
		_checkAuth(password);
		DDNSRRecord oldR = mRecord;
		mRecord = r;
		return oldR;
	}

	DDNSRRecord.ARecord getARecord() { return (DDNSRRecord.ARecord)_getRecordByType(RRType.RRTYPE_A) ;}
	DDNSRRecord.NSRecord getNSRecord() { return (DDNSRRecord.NSRecord)_getRecordByType(RRType.RRTYPE_NS) ;}

	private DDNSRRecord _getRecordByType(RRType type) {
		if ( mRecord != null && mRecord.type() == type ) return mRecord;
		return null;
	}

	DDNSNode child(DDNSFullName name) {
		return mChildren.get(name);
	}

	DDNSNode addChild(DDNSNode node, String password) throws DDNSAuthorizationException {
		_checkAuth(password);
		mChildren.put(node.name(), node);
		return node;
	}

	/**
	 * Recursive toString using a StringBuilder
	 * @param sb
	 * @param prefix
	 */
	void _toString(StringBuilder sb, String prefix) {
		sb.append(prefix).append('\'').append(name()).append("\n")
		  .append(prefix).append("    [");
		mRecord._toString(sb);
		sb.append("]\n");
		prefix += "  ";
		for ( DDNSNode child : mChildren.values() ) {
			child._toString(sb,  prefix);
			sb.append("\n");
		}
	}

	/**
	 * Recursively prints tree rooted at this DDNSNode.
	 * @param prefix
	 * @return
	 */
	public String toString(String prefix) {
		StringBuilder sb = new StringBuilder();
		_toString(sb, prefix);
		return sb.toString();
	}
	
	StringBuilder _toStringNoChildren(StringBuilder sb, String prefix) {
		sb.append(prefix).append(name())
		                 .append("   #Children: ").append(mChildren.size())
		                 .append("\n");
		sb.append(prefix).append("   [");
		mRecord._toString(sb);
		sb.append("] \n");
		return sb;
	}
	
	public String toStringNoChildren(String prefix) {
		StringBuilder sb = new StringBuilder();
		return _toStringNoChildren(sb, prefix).toString();
	}
}

