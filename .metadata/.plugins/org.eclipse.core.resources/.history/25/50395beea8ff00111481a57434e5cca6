package edu.uw.cs.cse461.ConsoleApps;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;

import edu.uw.cs.cse461.Net.Base.NetLoadable.NetLoadableConsoleApp;
import edu.uw.cs.cse461.util.ElapsedTime;

/**
 * Raw sockets version of ping client.
 * @author zahorjan
 *
 */
public class FilexferRaw extends NetLoadableConsoleApp {
	
	// ConsoleApp's must have a constructor taking no arguments
	public FilexferRaw() {
		super("filexferraw", false);
	}
	
	@Override
	public void run() {
		try {
			ElapsedTime.clear();
			
			// Eclipse doesn't support System.console()
			BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

			while ( true ) {
				try {
					
					System.out.print("Enter a host ip, or exit to exit: ");
					String targetIP = console.readLine();
					if ( targetIP == null ) targetIP = "";
					else if ( targetIP.equals("exit")) break;

					System.out.print("Enter the server's UDP port, or empty line to skip: ");
					String targetUDPPortStr = console.readLine();
					if ( targetUDPPortStr == null || targetUDPPortStr.isEmpty() ) continue;
					int targetUDPPort = Integer.parseInt(targetUDPPortStr);	
					
					System.out.print("Enter the server's TCP port, or empty line to exit: ");
					String targetTCPPortStr = console.readLine();
					if ( targetTCPPortStr == null || targetTCPPortStr.isEmpty() ) continue;
					int targetTCPPort = Integer.parseInt(targetTCPPortStr);
					
					String msg = "A";

					DatagramSocket socket = new DatagramSocket();
					socket.setSoTimeout(500); // wait at most 500 msec.
					for ( int trial=0; trial<50; trial++ ) {
						ElapsedTime.start("EchoRaw_UDPTotalDelay");
						byte[] buf = msg.getBytes();
						DatagramPacket packet = new DatagramPacket(buf, buf.length, new InetSocketAddress(targetIP, targetUDPPort));
						socket.send(packet);

						byte[] receiveBuf = new byte[buf.length];
						DatagramPacket receivePacket = new DatagramPacket(receiveBuf, receiveBuf.length);
						try { 
							socket.receive(receivePacket);
							ElapsedTime.stop("EchoRaw_UDPTotalDelay");
						} catch (SocketTimeoutException e) {
							System.out.println("UDP socket timeout");
							ElapsedTime.abort("EchoRaw_UDPTotalDelay");
						}
					}
					
					ElapsedTime.start("EchoRaw_TCPConnect");
					Socket tcpSocket = new Socket(targetIP, targetTCPPort);
					ElapsedTime.stop("EchoRaw_TCPConnect");
					socket.setSoTimeout(500);
					InputStream is = tcpSocket.getInputStream();
					OutputStream os = tcpSocket.getOutputStream();
					byte[] msgBytes = msg.getBytes();
					byte[] buf = new byte[msgBytes.length];
					for ( int trial=0; trial<50; trial++) {
						ElapsedTime.start("EchoRaw_TCPTotalDelay");
						os.write(msgBytes, 0, msgBytes.length);
						try {
							int len = 0;
							while ( len < msgBytes.length) {
								len += is.read(buf, 0, buf.length);
							}
							ElapsedTime.stop("EchoRaw_TCPTotalDelay");
						} catch (Exception e) {
							System.out.println("TCP read failed: " + e.getMessage());
							ElapsedTime.abort("EchoRaw_TCPTotalDelay");
						}
					}
					socket.close();
					
					System.out.println( ElapsedTime.statString());
					
				} catch (Exception e) {
					System.out.println("Exception: " + e.getMessage());
				} 
			}
		} catch (Exception e) {
			System.out.println("Echo.run() caught exception: " +e.getMessage());
		}
	}
	
	@Override
	public void shutdown() {
	}
	
}
