package edu.uw.cs.cse461.ConsoleApps;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.Socket;

import edu.uw.cs.cse461.Net.Base.NetBase;
import edu.uw.cs.cse461.Net.Base.NetLoadable.NetLoadableConsoleApp;
import edu.uw.cs.cse461.Net.TCPMessageHandler.TCPMessageHandler;
import edu.uw.cs.cse461.util.ConfigManager;
import edu.uw.cs.cse461.util.ElapsedTime;

/**
 * Raw sockets version of ping client.
 * @author zahorjan
 *
 */
public class PingTCPMessageHandler extends NetLoadableConsoleApp {
	private static final String TAG="PingRaw";
	
	// ConsoleApp's must have a constructor taking no arguments
	public PingTCPMessageHandler() {
		super("pingtcpmessagehandler", true);
	}
	
	@Override
	public void run() {
		try {
			// Eclipse doesn't support System.console()
			BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
			ConfigManager config = NetBase.theNetBase().config();

			try {

				ElapsedTime.clear();

				String targetIP = config.getProperty("echotcpmessagehandler.server");
				if ( targetIP == null ) {
					System.out.println("No echotcpmessagehandler.server entry in config file.");
					System.out.print("Enter a host ip, or empty line to exit: ");
					targetIP = console.readLine();
					if ( targetIP == null || targetIP.trim().isEmpty() ) return;
				}

				int targetTCPPort = config.getAsInt("echotcpmessagehandler.port", 0, TAG);
				if ( targetTCPPort == 0 ) {
					System.out.print("Enter the server's TCP port, or empty line to skip: ");
					String targetTCPPortStr = console.readLine();
					if ( targetTCPPortStr == null || targetTCPPortStr.trim().isEmpty() ) targetTCPPort = 0;
					else targetTCPPort = Integer.parseInt(targetTCPPortStr);
				}

				int nTrials = config.getAsInt("ping.ntrials", 5, TAG);

				String msg = "ping";

				if ( targetTCPPort != 0 ) {
					ElapsedTime.start("PingTCPMessageHandler_SocketCreation");
					Socket tcpSocket = new Socket(targetIP, targetTCPPort);
					tcpSocket.setSoTimeout(5000);
					TCPMessageHandler tcpMessageHandlerSocket = new TCPMessageHandler(tcpSocket);
					ElapsedTime.stop("PingTCPMessageHandler_SocketCreation");
					
					for ( int trial=0; trial<nTrials; trial++) {
						ElapsedTime.start("PingTCPMessageHandler_PostConnectionDelay");
						tcpMessageHandlerSocket.sendMessage(msg);
						try {
							String response = tcpMessageHandlerSocket.readMessageAsString();
							ElapsedTime.stop("PingTCPMessageHandler_PostConnectionDelay");
						} catch (Exception e) {
							System.out.println("TCPMessageHandler read failed: " + e.getMessage());
							ElapsedTime.abort("PingTCPMessageHandler_PostConnectionDelay");
						}
					}
					tcpSocket.close();
				}

				System.out.println( ElapsedTime.statString());

			} catch (Exception e) {
				System.out.println("Exception: " + e.getMessage());
			} 
		} catch (Exception e) {
			System.out.println("PingTCPMessageHandler.run() caught exception: " + e.getMessage());
		}
	}
	
	@Override
	public void shutdown() {
	}
	
}
