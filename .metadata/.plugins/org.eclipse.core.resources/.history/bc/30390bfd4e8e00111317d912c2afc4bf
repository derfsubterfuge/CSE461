package edu.uw.cs.cse461.sp12.OS;

import java.net.InetAddress;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONObject;

import edu.uw.cs.cse461.sp12.OS.DDNSResolverService.FullName;
import edu.uw.cs.cse461.sp12.OS.DDNSService.DDNSException;
import edu.uw.cs.cse461.sp12.OS.RRecord.ARecord;
import edu.uw.cs.cse461.sp12.util.Log;

public class DDNSRegistrationAgent {
	private static final String TAG="DDNSRegistrationAgent";
	
	private static final long defaultRefreshInterval = 600;
	private Timer mTimer;
	
	/**
	 * Periodically lets my parent know where I am.
	 */
	public DDNSRegistrationAgent() {

		mTimer = new Timer();

		long refreshInterval;
		try {
			String refreshStr = OS.config().getProperty("resolver.parentrefreshinterval");
			if ( refreshStr != null ) refreshInterval = Integer.parseInt(refreshStr);
			else {
				refreshInterval = defaultRefreshInterval;
				Log.e(TAG, "Missing resolver.parentrefreshinterval.  Using default = " + defaultRefreshInterval);
			}
			if ( refreshInterval < 60 ){
				Log.w(TAG, "Minimum parent refresh interval is 60 seconds.  Resetting value from config file.");
				refreshInterval= 60;
			}
		} catch (Exception e) {
			Log.e(TAG, "ADVISORY: Invalid or missing ddns.cachettl property in config file. Using ");
			mCacheTTL = 60;  // default is 1 minutes
		}
		
		
		mTimer.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				try {
					FullName myFullHostname = new FullName(OS.hostname());
					int myPort = ((RPCService)OS.getService("rpc")).localPort();
					String myIP = InetAddress.getLocalHost().getHostAddress();
					FullName parent = myFullHostname.parent();
					ARecord parentAddress = resolve( parent.toString() );
					if ( parentAddress.isNegative() ) throw new DDNSException("Parent resolves to negative entry: " + myFullHostname.parent() );
					RPCCallerSocket socket = new RPCCallerSocket(parent.toString(), parentAddress.ip(), Integer.toString(parentAddress.port()));
					socket.invoke(servicename(), "register", new JSONObject().put("host", OS.hostname())
																		 .put("ip", myIP)
																		 .put("port", myPort)
																		 .put("password", mMyPassword)
								 );
				} catch (Exception e) {
					Log.e(TAG, "ADVISORY: Caught exception while registering with parent:\n" + e.getMessage());
				}
			}
		},
		0L, (int)(mCacheTTL * 1000 * 0.8) );
	}
	
	
}
