package edu.uw.cs.cse461.ConsoleApps;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.json.JSONObject;

import edu.uw.cs.cse461.Net.Base.NetBase;
import edu.uw.cs.cse461.Net.Base.NetLoadable.NetLoadableConsoleApp;
import edu.uw.cs.cse461.Net.RPC.RPC;
import edu.uw.cs.cse461.Net.RPC.RPCCallerSocket;
import edu.uw.cs.cse461.util.ConfigManager;
import edu.uw.cs.cse461.util.ElapsedTime;

public class PingRPC extends NetLoadableConsoleApp {
	private static final String TAG="PingRPC";
	
	// OSConsoleApp's must have a constructor taking no arguments
	public PingRPC() {
		super("pingrpc", true);
	}
	
	@Override
	public void run() {
		try {
			ElapsedTime.clear();

			// Eclipse doesn't support System.console()
			BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
			ConfigManager config = NetBase.theNetBase().config();

			String targetIP = config.getProperty("echorpc.server");
			if ( targetIP == null ) {
				System.out.print("Enter a host ip, or an empty line to exit: ");
				targetIP = console.readLine();
				if ( targetIP == null || targetIP.trim().isEmpty() ) return;
			}

			int targetPort = config.getAsInt("echorpc.port", 0, TAG);
			if ( targetPort == 0 ) {
				System.out.print("Enter the RPC port, or empty line to exit: ");
				String targetPortStr = console.readLine();
				if ( targetPortStr == null || targetPortStr.trim().isEmpty() ) return;
				targetPort = Integer.parseInt(targetPortStr);
			}

			int nTrials = config.getAsInt("ping.ntrials", 5, TAG);


			ElapsedTime.start("PingRPC_JSONCreation");
			JSONObject args = new JSONObject().put("msg", "ping");
			ElapsedTime.stop("PingRPC_JSONCreation");

//			RPCCallerSocket socket;
			for ( int trial=0; trial<nTrials; trial++ ) {
				
				ElapsedTime.start("PingRPC_invoke");
//				socket = new RPCCallerSocket(targetIP, targetIP, targetPort);
//				JSONObject result = socket.invoke("echorpc", "echo", args);
				JSONObject result = RPC.invoke(targetIP, targetPort, "echorpc", "echo", args);
				ElapsedTime.stop("PingRPC_invoke");
				
//				socket.close();
			}

			System.out.println("\n\n");
			System.out.println(ElapsedTime.statString());

		} catch (Exception e) {
			System.out.println("Exception: " + e.getMessage());
		}

	}
	
	@Override
	public void shutdown() {
	}
	
}
