package edu.uw.cs.cse461.sp12.OS;

import java.util.Iterator;

import org.json.JSONException;
import org.json.JSONObject;

import edu.uw.cs.cse461.sp12.OS.DDNSException.DDNSRuntimeException;
import edu.uw.cs.cse461.sp12.OS.DDNSNode.DDNSCacheNode;
import edu.uw.cs.cse461.sp12.util.Log;

/**
 * This class supports the union of everything that can be returned from any call.
 * <p>
 * Version: 1.0.2
 */
class DDNSResultObject extends JSONObject {
	private final static String TAG="DDNSResponse";
	
	DDNSResultObject(JSONObject obj) throws DDNSException, JSONException {
		Iterator<String> it = obj.keys();
		while ( it.hasNext() ) {
			String key = it.next();
			if ( key.equals("node") ) 			put("node", new DDNSCacheNode(obj.getJSONObject("node")));
			else if ( key.equals("done"))		put("done", obj.getBoolean("done"));
			else if ( key.equals("lifetime")) 	put("lifetime", obj.getInt("lifetime"));
		}
	}
	
	DDNSCacheNode node() throws JSONException {
		return (DDNSCacheNode)get("node");  
	}
	
	boolean done() throws JSONException {
		return getBoolean("done");
	}
	
	int lifetime() throws JSONException {
		return getInt("lifetime");
	}
	
	/**
	 * Returning a DDNSException
	 * @param e
	 * @return
	 */
	static JSONObject marshall(DDNSException e) {
		try {
			JSONObject result = e.marshall();
			result.put("resulttype", "ddnsexception");
			return result;
		} catch (JSONException ee) {
			Log.e(TAG, "Fatal error trying to create JSONObject from exception: " + ee.getMessage() +
					   "Original exception message: " + e.getMessage()
				 );
			return new JSONObject(); // can't do much else -- adding anything can throw a JSONException
		}
	}
	
	/**
	 * Give JSONObject returned by some server on a ddns call, converts it to a DDNSNode, 
	 * throws a DDNSException, or converts it to null.
	 * @param obj
	 * @return
	 * @throws DDNSException
	 */
	static JSONObject unmarshall(JSONObject obj) throws DDNSException {
		try {
			String type = obj.getString("resulttype");
			
			// an exception was returned
			if ( type.equals("ddnsexception") ) {
				// this call will throw the exception
				DDNSException.unmarshall(obj);
				// never reached, but needed to compile
				return null;
			}
			return obj;
		} catch (JSONException e) {
			throw new DDNSRuntimeException("Response not parsable as DDNS response: " + obj.toString());
		}
	}

}
