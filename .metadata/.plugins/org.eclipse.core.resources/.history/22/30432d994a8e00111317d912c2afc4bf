package edu.uw.cs.cse461.sp12.OS;

import java.util.HashMap;

import edu.uw.cs.cse461.sp12.OS.DDNSResolverService.FullName;
import edu.uw.cs.cse461.sp12.OS.DDNSService.DDNSException;
import edu.uw.cs.cse461.sp12.OS.RRecord.RRType;

/**
 * A DDNSNameStructure contains:
 * <ul>
 * <li>A tree of DDNSNodes.  These are names within in the zone.
 * <li>A cache of all names this server has seen, implemented as a HashMap
 * </ul>
 * @author zahorjan
 *
 */
class DDNSNameStructure {
	private DDNSTree mNameTree;
	
	class DDNSTree {
		public DDNSTree() {
		}
	}

	static class DDNSNode {
		private FullName mName;
		private HashMap<FullName, DDNSNode> mChildren;
		private RRecord mRecord;
		
		public DDNSNode(FullName name) {
			mName = name;
			mChildren = new HashMap<FullName,DDNSNode>();
		}

		FullName name() { return mName; }
		DDNSNode findChild(String name) { return mChildren.get(name); }
		
		public RRecord getRecord() { return mRecord; }
		public RRecord.ARecord getARecord() { return _getRecordByType(RRType.RRTYPE_A) ;}
		public RRecord.NSRecord getNSRecord() { return _getRecordByType(RRType.RRTYPE_NS) ;}
		
		private RRecord _getRecordByType(RRType type) {
			if ( mRecord != null && mRecord.type() == type ) return mRecord;
			return null;
		}

		// only one record of each type is allowed in the list
		//TODO: is that enough?  CNAME + A?
		RRecord addRecord(RRecord r) {
			RRecord oldRecord = mRecordList.getRecordOfType(r.type());
			mRecordList.add(r);
			return oldRecord;
		}

		public DDNSNode child(FullName name) {
			return mChildren.get(name);
		}

		public DDNSNode addChild(DDNSNode node) {
			mChildren.put(node.name(), node);
			return node;
		}
		
		private void _toString(StringBuilder sb, String prefix) {
			sb.append(prefix).append(name());
			prefix += "\t";
			sb.append(prefix).append(records().toString(prefix)).append("\n");
			for ( FullName childName : mChildren.keySet() ) {
				sb.append(prefix).append(mChildren.get(childName).toString(prefix)).append("\n");
			}
		}

		String toString(String prefix) {
			StringBuilder sb = new StringBuilder();
			_toString(sb, prefix);
			return sb.toString();
		}
	}
	
	public DDNSNameStructure() {
		mNameTree = new DDNSTree();
	}
	
	public DDNSTree tree() { return mNameTree; }

}
