package edu.uw.cs.cse461.sp12.OS;

import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;

import edu.uw.cs.cse461.sp12.OS.DDNSException.DDNSNoAddressException;
import edu.uw.cs.cse461.sp12.OS.HTTPDService.HTTPProvider;
import edu.uw.cs.cse461.sp12.OS.OSLoadable.OSLoadableService;
import edu.uw.cs.cse461.sp12.util.Log;

public class DDNSMonitorService  implements OSLoadableService, HTTPProvider {
	private static final String TAG="DDNSMonitorService";
	
	private Timer mTimer;
	
	private static class DDNSMonitorDB extends DB461SQLite {
		public static final String TABLENAME = "ddnsmonitorstats";
		public static final String[][] fields = { {"name", "TEXT"},
												  {"ewma", "REAL"},
												  {"hits", "INTEGER"},
												  {"samples", "INTEGER"}
												};
		public static class DDNSMonitorRecord {
			public String name;
			public double ewma;
			public int hits;
			public int samples;
			DDNSMonitorRecord() { name = null;  ewma = 0.1;  hits = 0; samples = 0;	}
		}
		private DDNSMonitorDB() throws Exception {
			super( "ddnsmonitor.db", new DB461Descriptor().addTable(TABLENAME, fields) );
			openOrCreateDatabase();
		}
		private DDNSMonitorRecord _readRecord(DDNSFullName name) throws Exception {
			DDNSMonitorRecord record = new DDNSMonitorRecord();
			String query = "SELECT * FROM " + TABLENAME + " WHERE name='" + name + "'";
			RecordIterator it = query(query);
			while ( it.next() ) {
				record.name = it.getString(0);
				record.ewma = it.getDouble(1);
				record.hits = it.getInt(2);
				record.samples = it.getInt(3);
			}
			return record;
		}
		private void _writeRecord(DDNSMonitorRecord record) throws Exception {
			StringBuilder sb = new StringBuilder().append("INSERT OR REPLACE INTO ")
												  .append(TABLENAME)
												  .append(" VALUES ('")
												  .append(record.name).append("',")
												  .append(record.ewma).append(",")
												  .append(record.hits).append(",")
												  .append(record.samples).append(")");
			exec(sb.toString());
		}
		synchronized void hit(DDNSFullName name) throws Exception {
			DDNSMonitorRecord record = _readRecord(name);
			record.name = name.toString();
			record.hits++;
			record.samples++;
			record.ewma = 0.9*record.ewma + 0.1;
			_writeRecord(record);
		}
		synchronized void miss(DDNSFullName name) throws Exception {
			DDNSMonitorRecord record = _readRecord(name);
			record.name = name.toString();
			record.samples++;
			record.ewma = 0.9*record.ewma;
			_writeRecord(record);
		}
	}
	
	@Override
	public String loadablename() { return "ddnsmonitor"; }
	
	/**
	 * Called to end execution.  Specifically, need to terminate any threads we've created.
	 */
	@Override
	public void shutdown() {
		if ( mTimer != null ) mTimer.cancel();
		mTimer = null;
	}
	
	@Override
	synchronized public String httpServe(String[] uriArray) {
		DDNSMonitorDB db = null;
		try {
			db = new DDNSMonitorDB();
			if ( db != null ) return db.toString();
			return "No DB";
		} catch (Exception e) {
			return "Caught exception trying to print db: " + e.getMessage();
		} finally {
			if ( db != null ) db.close();
		}
	}
	
	public DDNSMonitorService() throws Exception {
		mTimer = new Timer();
		mTimer.scheduleAtFixedRate(new TimerTask() {
			public void run() {
				DDNSMonitorDB db = null;
				try {
					db = new DDNSMonitorDB();
					Vector<String[]> nameVec = OS.config().readNamePasswordVec("ddns.nslist");
					DDNSResolverService resolver = (DDNSResolverService)OS.getService("ddnsresolver");
					for ( String[] entry : nameVec ) {
						DDNSFullName fullName = new DDNSFullName(entry[0]);
						try {
							resolver.resolve(fullName.toString());
							db.hit(fullName);
						} catch (DDNSNoAddressException e) {
							db.miss(fullName);
						}
					}
				} catch (Exception e) {
					Log.e(TAG, "Caught exception: " + e.getMessage());
				} finally {
					if ( db != null ) db.close();
				}
			}
		}, 0, 10*60*1000); // every 10 minutes
	}
	

}
