package edu.uw.cs.cse461.sp12.OS;

import java.util.HashMap;

import edu.uw.cs.cse461.sp12.OS.DDNSResolverService.FullName;
import edu.uw.cs.cse461.sp12.OS.DDNSService.DDNSException;
import edu.uw.cs.cse461.sp12.OS.RRecord.RRType;

class DDNSNode {
	private FullName mName;
	private RRecord mRecord;
	private HashMap<FullName, DDNSNode> mChildren;

	public DDNSNode(FullName name, RRecord record) {
		mName = name;
		mRecord = record;
		mChildren = new HashMap<FullName,DDNSNode>();
	}

	FullName name() { return mName; }
	DDNSNode findChild(String name) { return mChildren.get(name); }

	public RRecord record() { return mRecord; }
	public RRecord.ARecord getARecord() { return (RRecord.ARecord)_getRecordByType(RRType.RRTYPE_A) ;}
	public RRecord.NSRecord getNSRecord() { return (RRecord.NSRecord)_getRecordByType(RRType.RRTYPE_NS) ;}

	private RRecord _getRecordByType(RRType type) {
		if ( mRecord != null && mRecord.type() == type ) return mRecord;
		return null;
	}

	public DDNSNode child(FullName name) {
		return mChildren.get(name);
	}

	public DDNSNode addChild(DDNSNode node) {
		mChildren.put(node.name(), node);
		return node;
	}

	private void _toString(StringBuilder sb, String prefix) {
		sb.append(prefix).append(name());
		prefix += "\t";
		sb.append(prefix).append(records().toString(prefix)).append("\n");
		for ( FullName childName : mChildren.keySet() ) {
			sb.append(prefix).append(mChildren.get(childName).toString(prefix)).append("\n");
		}
	}

	String toString(String prefix) {
		StringBuilder sb = new StringBuilder();
		_toString(sb, prefix);
		return sb.toString();
	}
}

