package edu.uw.cs.cse461.OSAndroidApps;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;

import org.json.JSONObject;

import android.app.Activity;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import edu.uw.cs.cse461.NetBase.ContextManager;
import edu.uw.cs.cse461.NetBase.NetBase;
import edu.uw.cs.cse461.OS.RPC.RPCCallerSocket;
import edu.uw.cs.cse461.OS.RPC.RPCService;
import edu.uw.cs.cse461.sp12.OSAndroidApps.R;


public class PingActivity extends Activity {
	private static final String TAG="PingActivity";
    public static final String PREFS_NAME = "CSE461PING";
	
	private String mMyIP;
	private String mServerIP;
	private String mServerPort;
	
	private long mStartTime;
	private long mStopTime;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Log.e(TAG, "onCreate");
        
        setContentView(R.layout.main);
        
        // save my context so that this app can retrieve it later (?)
        ContextManager.setContext(getApplicationContext());
        
    }
    
    /**
     * Called after we've been unloaded from memory and are restarting.  E.g.,
     * 1st launch after power-up; relaunch after going Home.
     */
    @Override
    protected void onStart() {
    	super.onStart();
        Log.e(TAG, "onStart");
        
        SharedPreferences settings = getSharedPreferences(PREFS_NAME,0);
        mServerIP = settings.getString("serverip", "cse461.cs.washington.edu");
        mServerPort = settings.getString("serverport", "46120");

    	((TextView)findViewById(R.id.iptext)).setText(mServerIP);
    	((TextView)findViewById(R.id.porttext)).setText(mServerPort);    	
        
        new Thread(){
        	public void run() {
                initialize();
                try {
                	String[] files = getAssets().list("");
                	for ( int i=0; i<files.length; i++ ) {
                		Log.e(TAG, "asset: " + files[i]);
                	}
                    
                	mMyIP = ((RPCService)NetBase.theNetBase().getService("rpc")).localIP();
                	
                	runOnUiThread(new Runnable() {
                		public void run() {
                        	String msg = mMyIP + ":" + Integer.toString(((RPCService)NetBase.theNetBase().getService("rpc")).localPort());
                	    	TextView myIpText = (TextView)findViewById(R.id.myiptext);
                        	if ( myIpText != null ) myIpText.setText(msg);
                		}
                	});
                	
                	Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
                	NetworkInterface iface;
                	String addressString;
                	while ( interfaces.hasMoreElements() ) {
                		iface = interfaces.nextElement();
                		if ( iface.isLoopback() ) continue;
                		Log.e(TAG, iface.toString());
                		Log.e(TAG, "getDisplayName = " + iface.getDisplayName());
                		Enumeration<InetAddress>ipVec =  iface.getInetAddresses();
                    	Log.e(TAG, "ipVec = ");
                    	if ( ipVec.hasMoreElements() ) {
                    		InetAddress address = ipVec.nextElement();
                    		addressString = address.toString();
                    		Log.e(TAG, "\t" + addressString);
                    		//break;
                    	}
                		Log.e(TAG, "getName = " + iface.getName());
                		Log.e(TAG, "isLoopback = " + (iface.isLoopback()?"yes":"no"));
                		Log.e(TAG, "isUp = " + (iface.isUp()?"yes":"no"));
                	}

                } catch (Exception e) {
                	Log.e(TAG, "Caught exception trying to display ip/port");
                }
        	}
        }.start();
    }

    /**
     * Wake-up from pause -- e.g., hitting the power button to bring up the display
     */
    @Override
    protected void onResume() {
    	super.onResume();
        Log.e(TAG, "onResume");
    }
    
    /**
     * Called when anything comes to the foreground on top of this app,
     * including hitting the power button.
     */
    @Override
    protected void onPause() {
    	super.onPause();
        Log.e(TAG, "onPause");
    }
    
    /**
     * Called, for example, if the user hits the Home button.
     */
    @Override
    protected void onStop() {
    	super.onStop();
    	Log.e(TAG, "onStop");
    	
    	SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
    	SharedPreferences.Editor editor = settings.edit();
    	editor.putString("serverip", mServerIP);
    	editor.putString("serverport", mServerPort);
    	editor.commit();
    	
    	// This will cause us to lose any currently allocated port...
    	NetBase.theNetBase().shutdown();
    }
    
    /**
     * System is shutting down...
     */
    @Override
    protected void onDestroy() {
    	super.onDestroy();
    	Log.e(TAG,"onDestroy");
    }
    
    private void initialize() {
		String configFilename = "jz.cse461.config.ini.png";  // .png avoids android compresing the file
		
		try {
			NetBase.theNetBase().init(getAssets().openFd(configFilename).createInputStream());
		} catch (Exception e) {
			Log.e(TAG, "Caught exception: " + e.getMessage());
		}
    }
    
    private void readUserInputs() throws Exception {
    	mServerIP = ((TextView)findViewById(R.id.iptext)).getText().toString();
    	mServerPort = ((TextView)findViewById(R.id.porttext)).getText().toString();
    }
    
    public void onGoClicked(View b) {
    	try {
    		readUserInputs();
    	} catch (Exception e) {
    		_setOutputText(e.getMessage());
    	}
    	new Thread(){
    		public void run() {
    			try {
    				mStartTime = System.nanoTime();
    				RPCCallerSocket sock = new RPCCallerSocket(NetBase.theNetBase().hostname(), mServerIP, Integer.parseInt(mServerPort));
    				JSONObject result = sock.invoke("echo", "echo", new JSONObject().put("testarg", 12.3));
    				mStopTime = System.nanoTime();
    				Log.e(TAG,  "Result = " + result.toString());
    				runOnUiThread(new Runnable() {
    					public void run() {
    						_updatePingResult();
    					}
    				});
    			} catch (Exception e) {
    				Log.e(TAG, "Caught exception: " + e.getMessage());
    			}
    		}
    	}.start();
    }

    private void _updatePingResult() {
		String msg = mServerIP + ":\n" + mServerPort + "\n\n\t" + ((mStopTime-mStartTime)/1000000.0) + " msec.";
		Log.e(TAG, msg);
		_setOutputText(msg);
    }
    
    private void _setOutputText(String msg) {
    	TextView outputText = (TextView)findViewById(R.id.outputtext);
		outputText.setText(msg);
    }
}