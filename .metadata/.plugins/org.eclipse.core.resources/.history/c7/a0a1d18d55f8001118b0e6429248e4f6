package edu.uw.cs.cse461.OSConsoleApps;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.json.JSONObject;

import edu.uw.cs.cse461.OS.OS;
import edu.uw.cs.cse461.OS.OSLoadableInterface.OSLoadableApp;
import edu.uw.cs.cse461.OS.DDNS.DDNSRRecord.ARecord;
import edu.uw.cs.cse461.OS.DDNS.DDNSResolverService;
import edu.uw.cs.cse461.OS.RPC.RPCCallerSocket;

public class EchoDDNS implements OSLoadableApp {

	public EchoDDNS() {
	}
	
	/**
	 * appname() must return a unique string.  There is already an "echo" - the one that uses only RPC.
	 * @return
	 */
	public String loadablename() {
		return "echoddns";
	}
	
	public void run() {
		try {
			// Eclipse doesn't support System.console()
			BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter lines like <target> <msg> to have <msg> echoed back");
			RPCCallerSocket socket = null;
			while ( true ) {
				try {
					System.out.print("Enter a host name, or exit to exit: ");
					String targetStr = console.readLine();
					if ( targetStr == null ) targetStr = "";
					else if ( targetStr.equals("exit")) break;
					ARecord targetAddr = ((DDNSResolverService)OS.theOS().getService("ddnsresolver")).resolve(targetStr);

					System.out.print("Enter message to echoed: ");
					String msg = console.readLine();
					socket = new RPCCallerSocket(targetStr, targetAddr.ip(), targetAddr.port());
					JSONObject response = socket.invoke("echo", "echo", new JSONObject().put("msg", msg) );
					System.out.println(response.getString("msg"));
				} catch (Exception e) {
					System.out.println("Exception: " + e.getMessage());
				}
//				finally {
//					if ( socket != null ) socket.close();
//				}
			}
		} catch (Exception e) {
			System.out.println("EchoConsole.run() caught exception: " +e.getMessage());
		}
	}
	
	public void shutdown() {
	}
	
}
